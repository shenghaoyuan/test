module Jump_to_cpu

open Words_t
open Arm_def
open Arm_semantics
open Valid
open FStar.List.Tot.Base
open Shift

(*let __set_MSP (v:int32) (st:arm_state) : Tot arm_state = update_reg SP v st

(*cpu_jump_to_image*)
let cp:code = Block [
    Ins (LDR R1 R0 (OConst 0l)); 
    Ins (MOV SP (OReg R1));
    Ins (LDR R0 R0 (OConst 1l));
    Ins (ORR R0 R0 (OConst 1l));
    Ins (BX R0)
    ]*)

val ins_in_code: c:code -> f:nat -> Tot (list ins) (decreases %[f; size_code c f])

let rec ins_in_code c f =
  match c with
  | Ins i -> [i]
  | Block l -> 
    (match l with
    | [] -> []
    | hd :: tl -> append (ins_in_code hd f) (ins_in_code (Block tl) f))
  | IfElse ifCond ifTrue ifFalse ->
    append (ins_in_code ifTrue f) (ins_in_code ifFalse f)
  | While whileCond body -> if f = 0 then [] else ins_in_code body (f-1)
    

let i0 : ins = LDR R1 R0 (OConst 0l)
let i1 : ins = MOV SP (OReg R1)
let i2 : ins = LDR R0 R0 (OConst 1l)
let i3 : ins = ORR R0 R0 (OConst 1l)
let i4 : ins = BX R0

let cplist = [i0; i1; i2; i3; i4]

val list_cond_ok: l:list ins -> st:arm_state -> Tot bool
let rec list_cond_ok l st =
  match l with
  | [] -> true
  | hd::tl -> if valid_ins hd st then
    let st' = eval_ins hd st in
      list_cond_ok tl st'
    else false

val list_ok_is_all_ok: l:list ins -> st:arm_state -> Lemma
  (requires (st.ok=true /\ (list_cond_ok l st)))
  (ensures  (let st1 = eval_list_ins l st in
             st1.ok = true))
let rec list_ok_is_all_ok l st =
  match l with
  | [] -> ()
  | hd :: tl -> let st' = eval_ins hd st in
    list_ok_is_all_ok tl st'

(*
#set-options "--z3rlimit 10000"
val functional_connectness_aux0: st:arm_state -> Lemma
  (requires (st.ok=true))
  (ensures  (list_cond_ok cplist st))

let functional_connectness_aux0 st = ()*)

val functional_connectness_aux1: st:arm_state -> Lemma
  (requires (st.ok=true /\ (list_cond_ok cplist st)))
  (ensures  (let st1 = eval_list_ins cplist st in
             st1.ok = true))

let functional_connectness_aux1 st = list_ok_is_all_ok cplist st  //functional_connectness_aux0 st; ()
(*let functional_connectness_aux1 st = () can be proved, but it spends too much time*)

open FStar.Int
  
val add_mod_zero: x:Int32.t -> Lemma
  (requires True)
  (ensures Int32.v x == add_mod (Int32.v x) (Int32.v 0l) )

let add_mod_zero x = ()

val load_reg_add_zero: st:arm_state -> Lemma
  (requires (st.ok=true))
  (ensures  (let st0 = eval_cond_ins i0 st in
             let r0 = eval_reg R0 st in
             let r1_0 = eval_reg R1 st0 in
             let st1 = eval_cond_ins i1 st0 in
             let sp = eval_reg SP st1 in
               r1_0 == (eval_mem r0 st) /\
               sp == r1_0
             ))

#push-options "--ifuel 50 --fuel 50 --z3rlimit 320"
let load_reg_add_zero st = ()
#pop-options



val functional_connectness_aux2_0: st:arm_state -> Lemma
  (requires (st.ok=true))
  (ensures  (let st0 = eval_cond_ins i0 st in
             let r0' = eval_reg R0 st in
             let r0  = eval_reg R0 st0 in
             let r1_0 = eval_reg R1 st0 in
               r1_0 == (eval_mem r0' st) /\
               r0 == r0'
             ))
let functional_connectness_aux2_0 st = ()

val functional_connectness_aux2_1: st:arm_state -> Lemma
  (requires (st.ok=true))
  (ensures  (let st1 = eval_cond_ins i1 st in
             let r0' = eval_reg R0 st in
             let r0  = eval_reg R0 st1 in
             let r1' = eval_reg R1 st in
             let r1 = eval_reg R1 st1 in
             let sp = eval_reg SP st1 in
               sp == r1 /\
               r1 == r1' /\
               r0 == r0'
             ))
let functional_connectness_aux2_1 st = ()

val functional_connectness_aux2_2: st:arm_state -> Lemma
  (requires (st.ok=true))
  (ensures  (let st2 = eval_cond_ins i2 st in
             let r0' = eval_reg R0 st in
             let r0 = eval_reg R0 st2 in
             let r1' = eval_reg R1 st in
             let r1 = eval_reg R1 st2 in
             let addr = Int32.int_to_t (add_mod (Int32.v r0') (Int32.v 1l)) in
             let sp' = eval_reg SP st in             
             let sp = eval_reg SP st2 in
              r0 == eval_mem addr st /\
              r1 == r1' /\
              sp' == sp
             ))
let functional_connectness_aux2_2 st = ()

val functional_connectness_aux2_3: st:arm_state -> Lemma
  (requires (st.ok=true))
  (ensures  (let st3 = eval_cond_ins i3 st in
             let r0' = eval_reg R0 st in
             let r0 = eval_reg R0 st3 in
             let r1' = eval_reg R1 st in
             let r1 = eval_reg R1 st3 in
             let sp' = eval_reg SP st in             
             let sp = eval_reg SP st3 in
               bit_n (Int32.v r0) 31 == true /\
               r0  == Int32.int_to_t (logor (Int32.v r0') (Int32.v 1l)) /\
               r1 == r1' /\
               sp' == sp
             ))
             
#push-options "--ifuel 50 --fuel 50 --z3rlimit 320"
let functional_connectness_aux2_3 st = ()
#pop-options

val functional_connectness_aux2_4: st:arm_state -> Lemma
  (requires (st.ok=true /\
             (let r0 = eval_reg R0 st in
              bit_n (Int32.v r0) 31 == true)
              ))
  (ensures  (let st4 = eval_cond_ins i4 st in
             let pc  = eval_reg PC st4 in
             let r0'  = eval_reg R0 st in
             let r0  = eval_reg R0 st4 in
             let r1' = eval_reg R1 st in
             let r1 = eval_reg R1 st4 in
             let sp' = eval_reg SP st in             
             let sp = eval_reg SP st4 in
              st4.mem_mode == Thumb16 /\
              sp == sp' /\
              r0 == r0' /\
              r1 == r1' /\
              pc == r0
             ))
let functional_connectness_aux2_4 st = ()


val functional_connectness_aux2': st:arm_state -> Lemma
  (requires (st.ok = true))
  (ensures  (let st' = eval_list_ins cplist st in 
             let st0 = eval_cond_ins i0 st in
             let st1 = eval_cond_ins i1 st0 in
             let st2 = eval_cond_ins i2 st1 in
             let st3 = eval_cond_ins i3 st2 in
             let st4 = eval_cond_ins i4 st3 in
               st' == st4
              ))
let functional_connectness_aux2' st = ()

val functional_connectness_aux2'': st:arm_state -> Lemma
  (requires (st.ok = true))
  (ensures  (let st0 = eval_cond_ins i0 st in
             let st1 = eval_cond_ins i1 st0 in
             let st2 = eval_cond_ins i2 st1 in
             let st3 = eval_cond_ins i3 st2 in
             let st4 = eval_cond_ins i4 st3 in
             let r0' = eval_reg R0 st in
             let addr = Int32.int_to_t (add_mod (Int32.v r0') (Int32.v 1l)) in
             let sp = eval_reg SP st4 in
             let r1 = eval_mem r0' st in
             let pc  = eval_reg PC st4 in
             let r0  = eval_reg R0 st4 in
              st4.mem_mode == Thumb16 /\
              sp == r1 /\
              r0 == Int32.int_to_t (logor (Int32.v (eval_mem addr st)) (Int32.v 1l)) /\
              pc == r0               
              ))

#push-options "--ifuel 50 --fuel 50 --z3rlimit 320"
let functional_connectness_aux2'' st = 
  let st0 = eval_cond_ins i0 st in
  let st1 = eval_cond_ins i1 st0 in
  let st2 = eval_cond_ins i2 st1 in
  let st3 = eval_cond_ins i3 st2 in
    functional_connectness_aux2_0 st;
    functional_connectness_aux2_1 st0;
    functional_connectness_aux2_2 st1;
    functional_connectness_aux2_3 st2;
    functional_connectness_aux2_4 st3
#pop-options

val functional_connectness_aux2: st:arm_state -> Lemma
  (requires (st.ok=true))
  (ensures  (let st1 = eval_list_ins cplist st in
             st1.mem_mode = Thumb16))
let functional_connectness_aux2 st = functional_connectness_aux2' st; functional_connectness_aux2'' st

val functional_connectness_aux3: st:arm_state -> Lemma
  (requires (st.ok=true))
  (ensures  (let st1 = eval_list_ins cplist st in
             let r0' = eval_reg R0 st in
             let sp = eval_reg SP st1 in
             let r0 = eval_reg R0 st1 in
             let addr = Int32.int_to_t (add_mod (Int32.v r0') (Int32.v 1l)) in
             let pc = eval_reg PC st1 in
             let r1 = eval_mem r0' st in
               r0 == Int32.int_to_t (logor (Int32.v (eval_mem addr st)) (Int32.v 1l)) /\
               sp == r1 /\
               pc == r0
               ))

#push-options "--ifuel 50 --fuel 50 --z3rlimit 320"
let functional_connectness_aux3 st =
   functional_connectness_aux2' st;functional_connectness_aux2'' st
#pop-options
